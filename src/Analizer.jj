
/*
 * Copyright Â© 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */


options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(Analizer)

public class Analizer {
}

PARSER_END(Analizer)

SKIP : {
	" "
|	"\t"
|	"\n"
|	"\r" 
}

TOKEN : {
<#let: ["a"-"z"]> 
|	<#dig: ["0"-"9"]> 
| <#gui: "_"> 
| <#pun: ".">
| <#arr: "@">
}

TOKEN : {
  <SBAJO: (<let>|<dig>)(<let>|<dig>)+ >
}

TOKEN : {
  <SALTO: (<let>|<dig>)(<let>|<dig>) >
}

TOKEN : {
    <Usuario: (<let>|<dig>)(<let>|<dig>|((<pun><gui>)+(<pun>)?|(<gui><pun>)+(<gui>)?|<gui>|<pun>)(<let>|<dig>))*(<pun>)?(<gui><pun>)*>
}

TOKEN : {
 <Expresion: <Usuario><arr><SBAJO><pun><SALTO>|<Usuario>(<gui>)+<arr>(<SBAJO>|<SALTO>)>
 }

void Start() : {}

{
    <Expresion> <EOF>
}